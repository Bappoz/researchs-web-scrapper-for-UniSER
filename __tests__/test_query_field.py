#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json

def test_query_field():
    print("üß™ Testando se o campo 'query' est√° sendo retornado corretamente...")
    
    api_url = 'http://localhost:8000/search/author/profile'
    
    # Perfil de teste
    profile_url = "https://scholar.google.com/citations?user=JicYPdAAAAAJ"  # Geoffrey Hinton
    
    params = {
        'query': 'Geoffrey Hinton',
        'platforms': 'scholar',
        'profile_url': profile_url,
        'export_excel': False,
        'max_publications': 20
    }
    
    print(f"üì° Fazendo requisi√ß√£o para: {api_url}")
    print(f"üìã Par√¢metros: {params}")
    
    try:
        response = requests.get(api_url, params=params, timeout=60)
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"\n‚úÖ RESPOSTA RECEBIDA:")
            print(f"  Success: {data.get('success', False)}")
            print(f"  Message: {data.get('message', 'N/A')}")
            print(f"  Platform: {data.get('platform', 'N/A')}")
            
            # Verificar especificamente o campo query
            query_field = data.get('query', None)
            print(f"\nüîç CAMPO QUERY:")
            print(f"  Valor: '{query_field}'")
            print(f"  Tipo: {type(query_field)}")
            print(f"  Vazio?: {not query_field}")
            
            # Verificar researcher_info
            if 'researcher_info' in data:
                researcher_name = data['researcher_info'].get('name', None)
                print(f"\nüë§ RESEARCHER_INFO:")
                print(f"  Nome: '{researcher_name}'")
                
                # Verificar se o query corresponde ao nome
                if query_field and researcher_name:
                    if query_field == researcher_name:
                        print(f"  ‚úÖ Query corresponde ao nome do pesquisador")
                    else:
                        print(f"  ‚ö†Ô∏è Query ({query_field}) != Nome ({researcher_name})")
                elif not query_field and researcher_name:
                    print(f"  ‚ùå Query vazio mas nome dispon√≠vel!")
                elif query_field and not researcher_name:
                    print(f"  ‚ö†Ô∏è Query dispon√≠vel mas nome vazio")
                else:
                    print(f"  ‚ùå Ambos vazios!")
            
            # Verificar se h√° dados para exporta√ß√£o
            has_publications = False
            pub_count = 0
            
            if 'data' in data and 'publications' in data['data']:
                publications = data['data']['publications']
                pub_count = len(publications)
                has_publications = pub_count > 0
            
            print(f"\nüìö DADOS PARA EXPORTA√á√ÉO:")
            print(f"  Publica√ß√µes: {pub_count}")
            print(f"  Pode exportar?: {has_publications and bool(query_field)}")
            
            # Simular verifica√ß√£o do frontend
            print(f"\nüñ•Ô∏è SIMULA√á√ÉO FRONTEND:")
            print(f"  Campo busca mostrar√°: '{query_field or '(vazio)'}'")
            print(f"  Bot√£o export habilitado?: {has_publications and bool(query_field)}")
            
            if not query_field:
                print(f"  üö® PROBLEMA: Campo query vazio impedir√° exporta√ß√£o!")
            elif not has_publications:
                print(f"  üö® PROBLEMA: Sem publica√ß√µes impedir√° exporta√ß√£o!")
            else:
                print(f"  ‚úÖ Exporta√ß√£o deveria funcionar normalmente")
                
        else:
            print(f"‚ùå Erro HTTP {response.status_code}")
            print(f"Resposta: {response.text[:200]}...")
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")

if __name__ == "__main__":
    test_query_field()